/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "m3rdmutation-layouts.dtsi"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>

#define NAV_L 1
#define OTHER_L 2
#define NUM_L 3
#define SYM_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
//&lt { quick-tap-ms = <200>; };

/ {


behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 19 20 21 22 23 33 34 35 36 37 47 48 49 50 51 61 62 63 64 65>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 24 25 26 27 28 38 39 40 41 42 52 53 54 55 56>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        num_lock {
            bindings = <&to 2>;
            key-positions = <61 62>;
            layers = <1 0 3>;
            timeout-ms = <15>;
            require-prior-idle-ms = <100>;
        };

        backsp {
            bindings = <&kp BACKSPACE>;
            key-positions = <27 28>;
            layers = <0>;
            timeout-ms = <15>;
            require-prior-idle-ms = <100>;
        };

        nav_lock {
            bindings = <&to 1>;
            key-positions = <55 56>;
            layers = <0 2 3>;
            timeout-ms = <15>;
            require-prior-idle-ms = <100>;
        };

        back_home {
            bindings = <&to 0>;
            key-positions = <47 48>;
            timeout-ms = <15>;
            require-prior-idle-ms = <100>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <10 11>;
            layers = <0>;
            timeout-ms = <15>;
            require-prior-idle-ms = <100>;
        };

        suppr {
            bindings = <&kp DEL>;
            key-positions = <40 41>;
            timeout-ms = <15>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        enter_left_hand {
            bindings = <&kp ENTER>;
            key-positions = <41 42>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MULTIPLY  &kp Y  &kp U  &kp I  &kp O  &kp P  &hml LEFT_GUI A  &hml LALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS  &kp H  &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr LEFT_ALT L  &hmr RIGHT_GUI SEMICOLON  &lt 3 Z  &kp X  &kp C  &kp V  &kp B  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_PLUS  &kp N  &kp M  &kp COMMA  &kp PERIOD  &kp FSLH  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &none  &lt 1 SPACE  &mt LEFT_SHIFT TAB  &kp KP_DOT  &kp KP_N0  &kp KP_SLASH  &kp KP_ENTER  &lt 2 ENTER  &mt RIGHT_ALT BACKSPACE  &none  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT
            >;
        };

        Nav {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp ESCAPE  &kp HOME  &kp UP_ARROW  &kp END  &kp PAGE_UP  &trans  &trans  &trans  &trans  &kp C_VOLUME_UP  &kp F7  &kp F8  &kp F9  &kp F12  &kp LC(A)  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp PAGE_DOWN  &trans  &trans  &trans  &trans  &kp K_MUTE  &kp F4  &kp F5  &kp F6  &kp F11  &kp LC(Z)  &kp LC(X)  &kp LC(W)  &kp LC(V)  &kp PRINTSCREEN  &trans  &trans  &trans  &trans  &kp C_VOLUME_DOWN  &kp F1  &kp F2  &kp F3  &kp F10  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp DELETE  &trans  &trans  &trans
            >;
        };

        Numeric {
            bindings = <
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &kp F16  &kp F17  &kp F18  &kp F19  &kp F20  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR_ALL  &trans  &trans  &trans  &trans  &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp PLUS  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp MINUS  &kp NUMBER_4  &kp N5  &kp NUMBER_6  &kp N0  &trans  &trans  &trans  &trans  &kp LS(NUMBER_1)  &trans  &trans  &trans  &trans  &kp N  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp C  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp BACKSPACE  &kp ENTER  &trans  &trans  &trans
            >;
        };

        Mouse {
            bindings = <
&rgb_ug RGB_TOG &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT  &mmv MOVE_UP  &msc SCRL_RIGHT  &msc SCRL_UP  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT  &mmv MOVE_UP  &msc SCRL_RIGHT  &msc SCRL_UP  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans
    >;
        };
    };
};
